# -*- coding: utf-8 -*-
"""crude_oil_streamlit.py

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/147IE0tXUedA7DXWr7oLKaajeVX7q7e1M
"""

import requests

api_key = 'nsH8duWHIP4GA3eL1RgSoWh8my1gGOBpfzqyIeKp'
url = f"https://api.eia.gov/v2/petroleum/stoc/wstk/data/?frequency=weekly&data[0]=value&facets[product][]=EPC0&start=2016-01-04&end=2025-02-04&sort[0][column]=period&sort[0][direction]=desc&offset=0&length=5000&api_key={api_key}"

response = requests.get(url)
data = response.json()
#print(data)  # Check the structure of the response

import json
# Save the response as a JSON file
with open("response_01Mar25_v4.json", "w") as json_file:
    json.dump(data, json_file, indent=4)  # Use indent=4 for pretty formatting

#print("Response saved to 'response_01Mar25_v4.json'")

#create polars dataframe
import polars as pl

# Load the JSON file
with open("response_01Mar25_v4.json", "r") as file:
    data = json.load(file)

# Extract the 'data' field from the JSON response
records = data["response"]["data"]

# Convert to Polars DataFrame
df = pl.DataFrame(records)

# Display the first few rows of the DataFrame
#print(df.head())
#print(df.tail())
#print(df.schema)

#print(df.head())

# Group by period and area-name, summing up stock values
grouped_df = df.group_by(["period", "area-name"]).agg([
    pl.col("value").cast(pl.Float64).sum().alias("total_stocks")
])

# Sort by period for better visualization
grouped_df = grouped_df.sort(["period", "area-name"])

# Display grouped DataFrame
#print(grouped_df)

# Pivot data for visualization
pivoted_df = grouped_df.pivot(
    values="total_stocks",
    index="period",
    columns="area-name"
)

# Display pivoted DataFrame
#print(pivoted_df)

import matplotlib.pyplot as plt

# Convert Polars DataFrame to Pandas for plotting
plot_data = pivoted_df.to_pandas()

# # Plotting
# plt.figure(figsize=(10, 6))
# for column in plot_data.columns[1:]:  # Skip the 'period' column if included
#     plt.plot(plot_data["period"], plot_data[column], marker='o', label=column)

# plt.title("Crude Oil Stocks by PAD District Over Time")
# plt.xlabel("Date")
# plt.ylabel("Stock Level (Thousand Barrels)")
# plt.legend(title="PAD District")
# plt.grid(True)
# plt.tight_layout()
# plt.show()

#let's drop U.S. from the dataset so the graphs are easier to read.
plot_data_nous = plot_data.drop(columns=["U.S."])

# # Plotting
# plt.figure(figsize=(10, 6))
# for column in plot_data_nous.columns[1:]:  # Skip the 'period' column if included
#     plt.plot(plot_data_nous["period"], plot_data_nous[column], marker='o', label=column)

# plt.title("Crude Oil Stocks by PAD District Over Time")
# plt.xlabel("Date")
# plt.ylabel("Stock Level (Thousand Barrels)")
# plt.legend(title="PAD District")
# plt.grid(True)
# plt.tight_layout()
# plt.show()

# Assuming you've already loaded your data into a Polars DataFrame called 'df'
# Filter out rows where area-name is 'U.S.', and also NA)
df_pl_nous = df.filter(pl.col("area-name") != "U.S.")
df_pl_nous = df_pl_nous.filter(pl.col("area-name") != "NA")

# Display the filtered DataFrame
#print(df_pl_nous.head())

#let's break the x axis into bimonthly values

from datetime import datetime

# After loading your data and filtering for crude oil
# Assuming your DataFrame has 'period' and 'value' columns

# Convert period to datetime
df_pl_nous = df_pl_nous.with_columns(pl.col("period").str.to_datetime("%Y-%m-%d").alias("date"))

# Extract year and month, then create a bimonthly period
df_pl_nous = df_pl_nous.with_columns([
    pl.col("date").dt.year().alias("year"),
    pl.col("date").dt.month().alias("month")
])

# Create a bimonthly grouping (1-2, 3-4, 5-6, etc.)
df_pl_nous = df_pl_nous.with_columns(
    ((pl.col("month") - 1) // 2 + 1).alias("bimonthly_period")
)

# Create a period identifier combining year and bimonthly period
df_pl_nous = df_pl_nous.with_columns(
    (pl.col("year") * 10 + pl.col("bimonthly_period")).alias("year_bimonthly")
)

# Group by bimonthly period and area-name, then average the values
bimonthly_df_pl_nous = df_pl_nous.group_by(["year_bimonthly", "area-name"]).agg([
    pl.col("value").cast(pl.Float64).mean().alias("avg_stocks"),
    pl.col("date").min().alias("start_date")  # Get the first date in each period
])

# Sort by date and area
bimonthly_df_pl_nous = bimonthly_df_pl_nous.sort(["start_date", "area-name"])

# # Plot the bimonthly averages
# plt.figure(figsize=(12, 6))
# for area in bimonthly_df_pl_nous["area-name"].unique():
#     area_data = bimonthly_df_pl_nous.filter(pl.col("area-name") == area)
#     plt.plot(area_data["start_date"], area_data["avg_stocks"], marker='o', label=area)

# plt.title("Crude Oil Stocks by PAD District (Bimonthly Average)", fontsize=16)
# plt.suptitle("Data Source: EIA API | Analysis Date: March 4, 2025", fontsize=10, x = 0.55, y= -0.05)
# plt.xlabel("Date", fontsize=14)
# plt.ylabel("Stock Level (Thousand Barrels)", fontsize=14)
# plt.legend(title="PAD District")
# plt.grid(True)
# plt.tight_layout()
# plt.xticks(rotation=45)
# plt.show()

#install streamlit
#pip install streamlit
#create a python script (app.py)

import streamlit as st
import pandas as pd
import matplotlib.pyplot as plt


# Sidebar filters
st.sidebar.header("Filter Options")
selected_padd = st.sidebar.multiselect("Select PAD District(s):", options=df["area-name"].unique(), default=df["area-name"].unique())

# Filter data based on selection
filtered_df = bimonthly_df_pl_nous.filter(pl.col("area-name").is_in(selected_padd)) # Use filter instead of boolean indexing

filtered_df.head()

# Plotting
st.title("Crude Oil Stocks by PAD District (Bimonthly Average)")
fig, ax = plt.subplots(figsize=(10, 6))

for area in filtered_df["area-name"].unique():
# Use filter to select rows where "area-name" matches the current area
    area_data = filtered_df.filter(pl.col("area-name") == area)
    ax.plot(area_data["start_date"], area_data["avg_stocks"], marker='o', label=area)

ax.set_title("Crude Oil Stocks by PAD District (Bimonthly Average)")
ax.set_xlabel("Date")
ax.set_ylabel("Stock Level (Thousand Barrels)")
ax.legend(title="PAD District")
ax.grid(True)

st.pyplot(fig)